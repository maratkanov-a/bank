// Code generated by protoc-gen-goclay, but your can (must) modify it.
// source: accounts.proto

package accounts

import (
	"context"
	"errors"
	"github.com/maratkanov-a/bank/internal/pkg/repository"
	"github.com/maratkanov-a/bank/pkg/accounts"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestImplementation_Update(t *testing.T) {
	var (
		ctx             = context.Background()
		ID        int64 = 1192
		someError       = errors.New("some error")
		validReq        = &accounts.UpdateRequest{
			ID:          ID,
			Name:        "someName",
			Balance:     100.11,
			Currency:    accounts.CurrencyType_RU,
			IsAvailable: true,
		}
		expectAccountRepo = &repository.Account{
			ID:          1192,
			Name:        "someName",
			Balance:     10011,
			Currency:    "RU",
			IsAvailable: true,
		}
	)

	t.Run("validate", func(t *testing.T) {
		for _, tc := range []struct {
			name string

			req *accounts.UpdateRequest

			errorMessage string
		}{
			{
				name: "no ID; expect error",
				req: &accounts.UpdateRequest{
					Name:     "someName",
					Balance:  100.11,
					Currency: accounts.CurrencyType_RU,
				},
				errorMessage: "invalid UpdateRequest.ID",
			}, {
				name: "invalid name; expect error",
				req: &accounts.UpdateRequest{
					ID:       1192,
					Balance:  100.11,
					Currency: accounts.CurrencyType_RU,
				},
				errorMessage: "invalid UpdateRequest.Name",
			},
			{
				name: "invalid balance; expect error",
				req: &accounts.UpdateRequest{
					ID:       1192,
					Name:     "someName",
					Balance:  100.111,
					Currency: accounts.CurrencyType_RU,
				},
				errorMessage: "incorrect currency value",
			},
			{
				name: "invalid currency; expect error",
				req: &accounts.UpdateRequest{
					ID:       1192,
					Name:     "someName",
					Balance:  100.11,
					Currency: 123,
				},
				errorMessage: "invalid UpdateRequest.Currency",
			},
		} {
			t.Run(tc.name, func(t *testing.T) {
				i := Implementation{}

				resp, err := i.Update(ctx, tc.req)
				require.Error(t, err)
				require.Nil(t, resp)

				assert.Contains(t, err.Error(), tc.errorMessage)
			})
		}
	})

	t.Run("repo err; expect err", func(t *testing.T) {
		i := newTestImplementation(t)
		i.arMock.UpdateMock.Expect(ctx, expectAccountRepo).Return(someError)

		resp, err := i.Update(ctx, validReq)
		require.Error(t, err)
		require.Nil(t, resp)

		assert.Equal(t, someError, err)
	})

	t.Run("expect ok", func(t *testing.T) {
		i := newTestImplementation(t)
		i.arMock.UpdateMock.Return(nil)

		resp, err := i.Update(ctx, validReq)
		require.NoError(t, err)
		require.Empty(t, resp)
	})
}
