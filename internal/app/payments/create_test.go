// Code generated by protoc-gen-goclay, but your can (must) modify it.
// source: payments.proto

package payments

import (
	"context"
	"errors"
	"github.com/maratkanov-a/bank/pkg/payments"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestImplementation_Create(t *testing.T) {
	var (
		ctx             = context.Background()
		successID int64 = 1192
		someError       = errors.New("some error")
		validReq        = &payments.CreateRequest{
			Amount:      10.11,
			AccountFrom: 11,
			AccountTo:   12,
		}
	)

	t.Run("validate", func(t *testing.T) {
		for _, tc := range []struct {
			name string

			req *payments.CreateRequest

			errorMessage string
		}{
			{
				name: "no amount; expect error",
				req: &payments.CreateRequest{
					AccountFrom: 11,
					AccountTo:   12,
				},
				errorMessage: "invalid CreateRequest.Amount",
			},
			{
				name: "no from; expect error",
				req: &payments.CreateRequest{
					Amount:    10.11,
					AccountTo: 12,
				},
				errorMessage: "invalid CreateRequest.AccountFrom",
			},
			{
				name: "no to; expect error",
				req: &payments.CreateRequest{
					Amount:      10.11,
					AccountFrom: 12,
				},
				errorMessage: "invalid CreateRequest.AccountTo",
			},
			{
				name: "invalid amount; expect error",
				req: &payments.CreateRequest{
					Amount:      10.111,
					AccountFrom: 11,
					AccountTo:   12,
				},
				errorMessage: "incorrect currency value",
			},
			{
				name: "same sender and receiver; expect error",
				req: &payments.CreateRequest{
					Amount:      10.11,
					AccountFrom: 11,
					AccountTo:   11,
				},
				errorMessage: "select other receiver",
			},
		} {
			t.Run(tc.name, func(t *testing.T) {
				i := Implementation{}

				resp, err := i.Create(ctx, tc.req)
				require.Error(t, err)
				require.Nil(t, resp)

				assert.Contains(t, err.Error(), tc.errorMessage)
			})
		}
	})

	t.Run("repo err; expect err", func(t *testing.T) {
		i := newTestImplementation(t)
		i.prMock.CreateMock.Expect(ctx, 11, 12, 1011).Return(0, someError)

		resp, err := i.Create(ctx, validReq)
		require.Error(t, err)
		require.Nil(t, resp)

		assert.Equal(t, someError, err)
	})

	t.Run("expect ok", func(t *testing.T) {
		i := newTestImplementation(t)
		i.prMock.CreateMock.Return(successID, nil)

		resp, err := i.Create(ctx, validReq)
		require.NoError(t, err)
		require.NotNil(t, resp)

		assert.Error(t, someError, resp.ID)
	})
}
